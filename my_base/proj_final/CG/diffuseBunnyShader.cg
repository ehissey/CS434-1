
struct VertexDataInput {
	float4 vertex : POSITION;
	float3 normal : NORMAL;
	float3 color : COLOR;
	float2 texCoord : TEXCOORD0;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float4 color : COLOR;
	float3 vertex : TEXCOORD0;
	float3 normal : TEXCOORD1;
};

struct PixelDataOutput {
	float4 color : COLOR0;
};

VertexDataOutput VertexMain(VertexDataInput vdi, uniform float4x4 modelViewProj, float sphereRadius, float sphereScaleFactor, float3 objectCenter) {
	VertexDataOutput ret;

	float3 pos = vdi.vertex.xyz;
	pos = pos - objectCenter;
	pos = pos + sphereScaleFactor * (sphereRadius * normalize(pos) - pos);
	pos = pos + objectCenter;

	ret.projv = mul(modelViewProj, float4(pos, 1.0f));
	ret.color = float4(vdi.color, 1.0f);
	ret.vertex = pos;
	ret.normal = vdi.normal;
	return ret;
}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts, uniform float4x4 modelViewProj){
	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);

	return;
}

PixelDataOutput FragmentMain(VertexDataOutput pdi) {

	PixelDataOutput ret;

	ret.color = pdi.color;
	//ret.color = float4(0.0f, 1.0f, 0.0f, 1.0f);
	
	return ret;
}
