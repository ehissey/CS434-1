
struct VertexDataInput {
	float4 vertex : POSITION;
	float3 normal : NORMAL;
	float3 color : COLOR;
	float2 texCoord : TEXCOORD0;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float4 color : COLOR;
	float3 vertex : TEXCOORD0;
	float3 normal : TEXCOORD1;
};

struct PixelDataOutput {
	float4 color : COLOR0;
};

VertexDataOutput VertexMain(VertexDataInput vdi, uniform float4x4 modelViewProj) {
	VertexDataOutput ret;
	ret.projv = mul(modelViewProj, vdi.vertex);
	ret.color = float4(vdi.color, 1.0f);
	ret.vertex = vdi.vertex;
	ret.normal = vdi.normal;
	return ret;
}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts, uniform float4x4 modelViewProj, uniform float sf){
	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);

	return;
}

PixelDataOutput FragmentMain(VertexDataOutput pdi, 
	uniform float3 cameraEye, 
	uniform samplerCUBE envMap,
	uniform float background) {

	PixelDataOutput ret;

	if(background != 1.0f){
		float3 P0 = pdi.vertex;
		float3 N0 = normalize(pdi.normal);
		float3 L = normalize(P0 - cameraEye);
		float3 V = normalize(L - 2*dot(L,N0)*N0);
	
		ret.color = texCUBE(envMap, V);
	}else{
		float3 P0 = pdi.vertex;
		float3 V = normalize(P0 - cameraEye);

		ret.color = texCUBE(envMap, V);
	}
	
	return ret;
}


